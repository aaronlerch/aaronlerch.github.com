<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rack | Aaron Lerch]]></title>
  <link href="http://aaronlerch.github.com/blog/categories/rack/atom.xml" rel="self"/>
  <link href="http://aaronlerch.github.com/"/>
  <updated>2012-01-14T23:31:46-05:00</updated>
  <id>http://aaronlerch.github.com/</id>
  <author>
    <name><![CDATA[Aaron Lerch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preventing Rack::Session on a Per-Request Basis]]></title>
    <link href="http://aaronlerch.github.com/blog/2012/01/14/preventing-rack-session-on-a-per-request-basis/"/>
    <updated>2012-01-14T22:55:00-05:00</updated>
    <id>http://aaronlerch.github.com/blog/2012/01/14/preventing-rack-session-on-a-per-request-basis</id>
    <content type="html"><![CDATA[<p>This is admittedly a rare need, but the other day I found myself needing to
conditionally enable and disable sessions in Sinatra on a per-request basis.
Sinatra uses the Rack::Session middleware to manage sessions. I searched
around for a while but couldn't find out how to do it. There are options for
the session that can be set per-request, like this:
<code>ruby
get '/' do
  request.session_options[:renew] = true
end
</code></p>

<p>The <a href="http://rack.rubyforge.org/doc/Rack/Session/Abstract/ID.html">documentation</a> shows a :defer option that seems to do what I want, but the terminology didn't make it abundantly clear whether it did or not.</p>

<blockquote><p>:defer will not set a cookie in the response.</p></blockquote>

<p>Actually that does sound like what I want, sorta, but mentally I was
thinking "turn off" or "disabling" and not "deferring the setting of a cookie."</p>

<p>With most ruby projects, or for that matter, any interpreted language that isn't compiled
, I've found that I end up spending a decent amount of time reading the
code from my dependencies. Some unscientific polling of ruby devs I know showed
that to be a pretty standard practice.</p>

<p>Doing a little digging through the Rack::Session middleware showed an
option that didn't appear in the documentation:</p>

<blockquote><p>:skip will not a set a cookie in the response nor update the session state</p></blockquote>

<p>Now <em>that</em> matches the mental model of what I was looking for, and the
behavior as well. Turns out it's not in the docs because it was added
<a href="https://github.com/rack/rack/pull/277">recently</a> from a Rails core team
member to support the new asset pipeline in Rails 3.1, and the docs
haven't been updated yet.</p>

<p>So if, on a per-request basis, you want to disable using sessions
<em>entirely</em>, simply do:
<code>ruby
request.session_options[:skip] = true unless use_session?
</code>
(where "use_session?" is your method that figures out whether or not to
use sessions)</p>

<p>What's the diff between :defer and :skip, you ask? Well the answer is in
the pull request description</p>

<blockquote><p>This will not send a cookie back nor change the session state.</p>

<p>The :defer option did not send the cookie back but did change the session
state in the backend.</p>

<p>This is useful for assets requests that still go through the rack stack
but do not want to cause any change in the session (for example accidentally expiring flash messages).</p></blockquote>
]]></content>
  </entry>
  
</feed>
